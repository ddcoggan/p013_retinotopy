% p013 Retinotopy

clear all; close all;
projDir = '/mnt/HDD12TB/projects/p013_retinotopyTongLab';
cd(projDir)
addpath(genpath('/home/dave/matlab/2019b/toolbox/mrTools'));
addpath(genpath('/home/dave/matlab/2019b/toolbox/analyzePRF-1.1'));
addpath(genpath(projDir));

fieldStrengths = ["3T","7T"];
hemis = ["lh","rh"];
overwrite = 0;

for topup = ["topup", "noTopUp"]
    for b0 = ["noB0", "b0"]
        for fs = fieldStrengths
    
            subjDirs =  dir(fullfile('data/fMRI', fs, 'individual/*'));
            subjDirs = subjDirs(3:end);

            for s = 1:numel(subjDirs)

                subjDir = fullfile(subjDirs(s).folder, subjDirs(s).name);
                subject = subjDir(end-3:end);
                sessDirs = dir(fullfile('data/fMRI', fs, 'individual', subject, '*'));
                sessDirs = sessDirs(3:end);

                for se = 1:numel(sessDirs)

                    sessDir = fullfile(sessDirs(se).folder, sessDirs(se).name);
                    session = sessDir(end-6:end);
                    anatDir = fullfile(sessDir, 'anatomical');
            
                    funcDir = fullfile(sessDir, 'functional', 'retinotopy', 'allRuns', topup, b0);
                    
                    if exist(funcDir)
                        
                        funcGzip = fullfile(funcDir, 'mean_filtered_func_data.nii.gz');
                        funcNifti = funcGzip{1}(1:end-3);
                        if ~exist(funcNifti)
                            gunzip(funcGzip);
                        end

                        outDir = fullfile(funcDir, 'analyzePrf');
                        if ~exist(outDir)
                            mkdir(outDir);
                        end
                        
                        for hemi = hemis

                            % load cortex mask nifti 
                            indVoxelMask = [];
                            maskGzip = fullfile(funcDir, sprintf('reg/cortex_%s_dilated.nii.gz', hemi)); 
                            maskNifti = maskGzip{1}(1:end-3);
                            if ~exist(maskNifti)
                                gunzip(niftiGzip);
                            end

                            [mdata, mhdr] = cbiReadNifti(maskNifti);
                            volDim = size(mdata);

                            mask = zeros(volDim);
                            mask(find(mdata ~= 0)) = 1;
                            tmp = reshape(mdata, [], size(mdata,4));
                            indVoxelMask = union(indVoxelMask, find(tmp ~= 0));
    
                            [fdata fhdr] = cbiReadNifti(funcNifti);               % read the file
                            tmp = single(reshape(fdata, [], size(fdata,4)));      % flatten spatial dimensions
                            data = tmp(indVoxelMask,:);                          % apply mask

                            %%%% Outlier handling
                            outlierCutoff = 3; % in SD's for each voxel
                            meanOfVoxels = nanmean(data, 2);
                            stdOfVoxels = std(data, [], 2);
                            topEachVoxel = meanOfVoxels + outlierCutoff * stdOfVoxels;
                            bottomEachVoxel = meanOfVoxels - outlierCutoff * stdOfVoxels;

                            allOutlier = [];
                            for i = 1:size(data,1)
                                for j = 1:size(data,2)
                                    if data(i,j) > topEachVoxel(i)
                                        data(i,j) = topEachVoxel(i);
                                        allOutlier = [allOutlier; i,j];
                                    elseif data(i,j) < bottomEachVoxel(i)
                                        data(i,j) = bottomEachVoxel(i);
                                        allOutlier = [allOutlier; i,j];
                                    end
                                end
                            end
                            numOutlier = length(allOutlier);
                            percentOutlier = 100 * numOutlier / (prod(size(data)));

                            %%%% Prepare stimulus

                            % stimulus and acquisition parameters are hardcoded
                            downSampleFactor = 5; % stimulus masks can be spatially downsampled
                            prfRadius = 7; % in degrees (saved out during stim pres)
                            ppd = 51; % pixels per degree (saved out during stim pres)

                            screens = createPrfScreensWedgeRing(downSampleFactor, prfRadius, ppd);

                            %%%% Run analyzePRF
                            prfResult = analyzePRF(screens,data,2,struct('seedmode',[0 1 2], 'indVoxelMask',indVoxelMask, 'hrf',HIRF_doubleGamma_2', 'typicalgain',0.01, 'display','off'));

                            prfResult.ecc = downSampleFactor * prfResult.ecc;
                            prfResult.rfsize = downSampleFactor * prfResult.rfsize;
                            prfResult.exponent = prfResult.expt; prfResult = rmfield(prfResult, 'expt');

                            prfResult.options.outlierCutoff = outlierCutoff;
                            prfResult.options.allOutlier = allOutlier;
                            prfResult.options.numOutlier = numOutlier;
                            prfResult.options.percentOutlier = percentOutlier;

                            %%%% Save PRF esimtates
                            ang = nan(prod(volDim), 1);
                            ang(indVoxelMask) = prfResult.ang;
                            ang = reshape(ang, volDim);

                            ecc = nan(prod(volDim), 1);
                            ecc(indVoxelMask) = prfResult.ecc;
                            ecc = reshape(ecc, volDim);

                            exponent = nan(prod(volDim), 1);
                            exponent(indVoxelMask) = prfResult.exponent;
                            exponent = reshape(exponent, volDim);

                            rfsize = nan(prod(volDim), 1);
                            rfsize(indVoxelMask) = prfResult.rfsize;
                            rfsize = reshape(rfsize, volDim);

                            R2 = nan(prod(volDim), 1);
                            R2(indVoxelMask) = prfResult.R2;
                            R2 = reshape(R2, volDim);

                            gain = nan(prod(volDim), 1);
                            gain(indVoxelMask) = prfResult.gain;
                            gain = reshape(gain, volDim);

                            outDir = fullfile(funcDir, 'analyzePrf');
                            if ~exist(outDir)
                                mkdir(outDir);
                            end

                            fhdr0.datatype = 16; fhdr0.bitpix = 32; % Float32 (important! otherwise, floating info will be discard.)
                            cbiWriteNifti(fullfile(outDir, sprintf('/retino_ang_%s.nii', hemi)), ang, fhdr0);
                            cbiWriteNifti(fullfile(outDir, sprintf('/retino_ecc_%s.nii', hemi)), ecc, fhdr0);
                            cbiWriteNifti(fullfile(outDir, sprintf('/retino_exponent_%s.nii', hemi)), exponent, fhdr0);
                            cbiWriteNifti(fullfile(outDir, sprintf('/retino_rfsize_%s.nii', hemi)), rfsize, fhdr0);
                            cbiWriteNifti(fullfile(outDir, sprintf('/retino_R2_%s.nii', hemi)), R2, fhdr0);
                            cbiWriteNifti(fullfile(outDir, sprintf('/retino_gain_%s.nii', hemi)), gain, fhdr0);

                            %%%% Inspect the result
                            [maxR2, vx] = max(prfResult.R2); % which voxel should we inspect?
                            resolution = [size(screens,1) size(screens,1)]; % set-up
                            maxResolution = max(resolution);
                            hrf = HIRF_doubleGamma_2';

                            [d,xx,yy] = makegaussian2d(maxResolution,2,2,2,2);
                            modelfun = @(pp,dd) conv2run(posrect(pp(4)) ...
                                * (dd*[vflatten(placematrix(zeros(resolution), makegaussian2d(maxResolution,pp(1),pp(2),abs(pp(3)),abs(pp(3)),xx,yy,0,0) / (2*pi*abs(pp(3))^2))); 0]) ...
                                .^ posrect(pp(5)),hrf,dd(:,prod(resolution)+1));
                            polymatrix = projectionmatrix(constructpolynomialmatrix(size(data,2), 0:prfResult.options.maxpolydeg));
                            stim = reshape(screens, prod(resolution), length(screens))';
                            stim = [stim ones(size(stim,1),1)];

                            datats = polymatrix * data(vx,:)';
                            modelts = polymatrix * modelfun(prfResult.params(1,:,vx), stim);

                            figure;
                            subplot(2,1,1);
                            plot(datats,'r.', 'markersize', 10); hold on;
                            plot(modelts,'b-');
                            xlabel('TR');
                            ylabel('BOLD signal');
                            title(sprintf('%s, Time-series data (%dth voxel, R2=%.2f)', hemi{1}, vx, maxR2*0.01), 'fontsize',15);
                            subplot(2,1,2);
                            boxplot(prfResult.R2*0.01, 'orientation', 'horizontal');
                            xlabel('R2'); title('R2 boxplot', 'fontsize',15);

                            %%%% Save prfResult struct
                            save([outDir sprintf('/%s', hemi{1})], '-struct', 'prfResult');
                        end
                    end
                end
            end
        end
    end
end


